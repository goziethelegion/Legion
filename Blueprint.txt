Step 1 - Signing up user
So the Phone camera takes a picture of the person when the user clicks on the android button. 

OR

The PiCamera takes a picture of the user when the user clicks on the android button.
The problem is that the user doesn't take the picture, the user initializes the PiCamera to take a picture.
The PiCamera could take a picture when it detects a face.

Step 2 - Bluetooth Connection
Using the Phone's camera, once the user takes a picture that is acceptable to himself/herself,it is saved in jpeg format.
The picture is stored immediately in the database along with the other user info. Sign up is complete.
The problem comes up when the user might attempt to login. The PiCamera and the Phone Camera have different resolutions.

OR

Using the PiCamera, once a picture is taken. It is saved locally and overwritten whenever a new picture is taken.
Before the picture is overwritten, it is sent to the android application after a pairing through bluetooth.
The jpeg picture format is stored in the database along with other user info. Sign up is complete.

Step 3 - Facial Recognition
User tries to sign in using facial/fingerprint. The Picamera is automatic detection on the signup page.
So when the user optionally chooses to use the 2f scanner, the recognition process is initialized.
When the camera detects a face or fingerprint, it saves it locally again in jpeg format.

Step 4 - Database Verification
The saved picture is sent to the database. This time it is sent for verification.

						2f Scanner Maximization
Currently, it has 3 programs that uses video capture for signing up a face (facial detection), training the program for 
facial recognition and facial recognition respectively. It is to be redesigned to use only 2 programs.
						
						First Program (Facial Detection/Signing up User)
This program uses video capture for signing up the user, capturing all the user angles and saving it into the database.

Asks user for the username (Must be similar to the one used for signing up on android.)
If accurate, it continues by saving each of the user captured image with the username prefixed & number increment.

						Second Program (Training/Facial Recognition)
This program would first train the program for facial recognition and then use image capture to capture the image of the
user. Next, it prompts the user to enter username again, makes a connection with the database to retrieve pictures stored 
under that name. Next it loops through the images in the folder and finds a match. If match is found, it communicates with
the android software that the login was successful.

						Database Setup
The database is already setup with user info, so i'm gonna be creating another table for the captured pictures and have it
saved on the database. Since the camera captures different facial angles of the user, the table is to created in a way that
allows all the picture to be saved in a folder. So that when the user is trying to use the facial recognition, it loops 
through all the pictures in the folder.